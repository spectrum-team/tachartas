package models

import (
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Event struct reperesents an event scheduled by a client
// -------------------------------------------------------
// ID - Autogenerated database ID
// Name - Name of the event
// Venue - Name of the place where the event will be held
// Date -  Date of the event
// StartTime - Hour in which the event will start
// EndTime - Hour in which the event might end
// Description - brief explanation of what the event is about
// Image - URL that specifies where the image for the event was saved
// Price - Defines if the event has a price
// Assistants - Defines the amount of people that will attend the event
// Category - Defines the category the event is part of
// WillAssist - Used to tell if a user is assisting an event
type Event struct {
	ID           primitive.ObjectID  `bson:"_id" json:"-"`
	ApiID        string              `json:"id,omitempty"`
	Name         string              `bson:"name" json:"name,omitempty"`
	Venue        string              `bson:"venue" json:"venue,omitempty"`
	Date         time.Time           `bson:"date" json:"date,omitempty"`
	StartTime    int32               `bson:"start_time" json:"start_time,omitempty"`
	EndTime      int32               `bson:"end_time" json:"end_time,omitempty"`
	Description  string              `bson:"description" json:"description,omitempty"`
	Image        *primitive.ObjectID `bson:"image" json:"image,omitempty"`
	ImageContent *string             `json:"image_content" bson:"-"`
	Price        *float64            `bson:"price" json:"price,omitempty"`
	Contact      EventContact        `bson:"contact" json:"contact,omitempty"`
	Assistants   int64               `bson:"assistants" json:"assistants,omitempty"`
	Category     string              `bson:"category" json:"category,omitempty"`
	WillAssist   bool                `json:"will_assist,omitempty"`
}

// EventContact represents the contact information related to an event
// -------------------------------------------------------------------
// Name - Name of the person of contact
// Phone - Phone of the person of contact
// Email - Email of the person of contact
// SocialMedia - Social media accounts of the person of contact
type EventContact struct {
	Name        string                 `bson:"name" json:"name,omitempty"`
	Phone       string                 `bson:"phone" json:"phone,omitempty"`
	Email       string                 `json:"email" json:"email"`
	SocialMedia map[string]interface{} `bson:"social_media" json:"social_media,omitempty"`
}

type EventImage struct {
	ID         primitive.ObjectID `bson:"_id" json:"_id"`
	Length     int64              `json:"length,omitempty"`
	ChunkSize  int32              `json:"chunkSize,omitempty"`
	UploadDate time.Time          `json:"uploadDate,omitempty"`
	FileName   string             `json:"filename,omitempty"`
}

type EventQuery struct {
	Query bson.M `json:"query"`
	Limit *int64 `json:"limit,omitempty"`
	Skip  *int64 `json:"skip,omitempty"`
}

type ImageContent struct {
	Content string `json:"image_content"`
}
